import boto3
import json
import re

# Initialize AWS clients
dynamodb = boto3.client("dynamodb", region_name="us-west-2")  # Update as needed
bedrock_client = boto3.client("bedrock-runtime", region_name="us-west-2")
MODEL_ID = "anthropic.claude-3-5-sonnet-20241022-v2:0"

# Table name
TABLE_NAME = "REPORT-table"

# Natural language processing


def convert_query_to_sql(user_query):
    """
    Converts user query into an parti query using Claude 3 on Amazon Bedrock
    """
    prompt = f"""
    Convert the following user request into an partiQL query for a DynamoDB database.
   
    User Query: "{user_query}"

    Database Schema:
    - Table Name: REPORT-table
    - Columns: (ID, Company Name, Revenue, Net Profit Margin, ROE, ROA, Market Cap, EPS, GHG Emissions)
        analyze the user question and generate just the sql query.

    the meanings of the Schema with type are given below-
    1. ID (String) - A unique identifier for each company record.
    2. Company Name (String) - The name of the company.
    3. Revenue (Number) - Total revenue generated by the company (in millions or billions).
    4. Net Profit Margin (Decimal) - The percentage of revenue that remains as profit after all expenses.
    5. ROE (Decimal) - Return on Equity; measures profitability relative to shareholders' equity.
    6. ROA (Decimal) - Return on Assets; measures profitability relative to total assets.
    7. Market Cap (Number) - Market capitalization; total value of outstanding shares (in billions).
    8. EPS (Number) - Earnings Per Share; company's profitability per outstanding share.
    9. GHG Emissions (Number) - Greenhouse gas emissions, measured in metric tons.
    SQL Query:
    Note:
    ID is the primary key.
    Must have WHERE clause in the statement when using ORDER BY clause.

    TASK:
    you are only suppose to give PartiQL query without any additional text or explanation.
    If the
    """

    payload = {
        "anthropic_version": "bedrock-2023-05-31",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 500,
        "temperature": 0.2,
    }

    response = bedrock_client.invoke_model(
        modelId=MODEL_ID,
        body=json.dumps(payload),
    )

    # Parse Bedrock response
    response_body = json.loads(response["body"].read().decode("utf-8"))
    sql_query = response_body["content"][0]["text"]
    return (
        sql_query if sql_query else "SELECT * FROM REPORT-table;"
    )  # Default SQL query


# connecting with dyamoDB and executing the query


def execute_sql_query(sql_query, user_query):
    """
    Executes the SQL query on DynamoDB and returns the result
    """

    try:

        response = dynamodb.execute_statement(Statement=sql_query)
        print(
            "********************************Successs*****************************************"
        )
        return response["Items"]

    except Exception as e:

        Full_table_query = 'SELECT * FROM "REPORT-table"'
        response = dynamodb.execute_statement(Statement=Full_table_query)
        # print(response['Items'])
        prompt = f"""
        This is the user query:{user_query}
        and this is the full table: {response['Items']}
        Task:
            give me only the output of the query from table in json format without any description.
        """
        payload = {
            "anthropic_version": "bedrock-2023-05-31",
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": 2000,
            "temperature": 0.2,
        }
        response = bedrock_client.invoke_model(
            modelId=MODEL_ID,
            body=json.dumps(payload),
        )
        response_body = json.loads(response["body"].read().decode("utf-8"))
        data = response_body["content"][0]["text"]
        return data


# Generating Insights


def generate_insights(user_query, sql_query, data):
    prompt = f"""
    a question: {user_query} is provided to you.
    this question is about retriving data from database,
    a corresponding query was generated for the same which is {sql_query}.
    the output of the query when executed is given as: {data}
    generate insights so that user will get a clear idea about the output.
    do not add any extra explanation. just generate the insight of the data and question
    """
    payload = {
        "anthropic_version": "bedrock-2023-05-31",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 500,
        "temperature": 0.2,
    }

    response = bedrock_client.invoke_model(
        modelId=MODEL_ID,
        body=json.dumps(payload),
    )

    # Parse Bedrock response
    response_body = json.loads(response["body"].read().decode("utf-8"))
    insights = response_body["content"][0]["text"]
    return insights if insights else "No insights generated."  # Default SQL query


# Generating graph code from output of sql query
def generate_highcharts_code(user_query, sql_query, data):
    example = """
        {    chart: {       type: 'bar'   },     title: {        text: 'Companies with EPS of 5'   },  xAxis: {      categories: ['Company 22', 'Company 16', 'Company 13', 'Company 28', 'Company 19', 'Company 7', 'Company 25', 'Company 10'],         title: {             text: 'Companies'         }     },     yAxis: {         title: {             text: 'Values'         }     },     tooltip: {         headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',         pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +             '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',         footerFormat: '</table>',         shared: true,         useHTML: true     },     plotOptions: {         bar: {             dataLabels: {                 enabled: true             }         }     },     series: [{         name: 'EPS',         data: [5, 5, 5, 5, 5, 5, 5, 5]     }, {         name: 'Revenue',         data: [1600000, 1300000, 1150000, 1900000, 1450000, 850000, 1750000, 1000000]     }, {         name: 'Market Cap',         data: [3200000, 2600000, 2300000, 3800000, 2900000, 1700000, 3500000, 2000000]     }] };
    """
    prompt = f"""
    a question: {user_query} is provided to you.
    this question is about retriving data from database,
    a corresponding query was generated for the same which is {sql_query}.
    the output of the query when executed is given as: {data}
    write a highcharts const option variable for react to represent the data.
    you can refer this example {example} and generate only the chart data.
    generate either Pie chart or Bar chart.
    The variable should be named 'option' and should be a valid highchart JS code.
    do not generate any other text or explanation.
    The variable should be in context with respect to the question, data and query.
    The generated graph should answer the users question.
    give the complete code as given in the example.

    Note - Do not include \n in the code.

    """

    payload = {
        "anthropic_version": "bedrock-2023-05-31",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 2000,
        "temperature": 0.4,
    }

    response = bedrock_client.invoke_model(
        modelId=MODEL_ID,
        body=json.dumps(payload),
    )
    response_body = json.loads(response["body"].read().decode("utf-8"))
    graph_code = response_body["content"][0]["text"]

    cleaned_code = re.sub(r"\\n", "", graph_code)

    return cleaned_code


# Main function


def lambda_handler(event, context):
    """
    AWS Lambda entry point
    """
    user_query = event["query"]
    user_query = event.get("query")
    print("User Query: ", user_query)
    # Step 1: Convert user query to SQL
    sql_query = convert_query_to_sql(user_query)
    if not sql_query:
        return {"error": "Failed to generate SQL query"}

    # Step 2: Execute SQL query
    query_output = execute_sql_query(sql_query, user_query)

    # Step 3: Generate Highcharts.js code
    highcharts_code = generate_highcharts_code(user_query, sql_query, query_output)

    # Step 4: Generate Insights of graph
    insights = generate_insights(user_query, sql_query, query_output)

    return {
        "statusCode": 200,
        "sql_query": sql_query,
        "query_output": query_output,
        "highcharts_code": highcharts_code,
        "insights": insights,
    }
